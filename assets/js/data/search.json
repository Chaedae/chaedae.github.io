[ { "title": "운영 시 유용한 명령어 모음", "url": "/posts/%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%AA%A8%EC%9D%8C/", "categories": "ETC, 팁", "tags": "운영, 명령어, hadoop, server, linux, hive, postgres", "date": "2022-08-18 16:38:00 +0900", "snippet": "서버 운영을 하면서 자주 쓰이거나 자주 까먹는 명령어를 정리해봤다.계속해서 업데이트 할 예정이다.LINUX# 용량 확인서버전체: df -h특정폴더: du -sh /경로iNode: df -i# 파일 분할용량기준: split -b 100M original.dat new_file.dat라인기준: split -l 100000 original.csv new_file.csv# 기간 지난 파일 삭제find /경로 -mtime +100 -exec rm -rf {} \\; (생성된지 100일 지난 파일 삭제)# 파일 내 특정 단어 찾기1..." }, { "title": "Kafka 데이터 연동", "url": "/posts/Kafka-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%88%98%EC%A7%91/", "categories": "Python, BigData", "tags": "python, kafka, 파이썬, 카프카, consumer, producer, ES, elasticsearch, redis", "date": "2022-08-01 17:12:00 +0900", "snippet": "Python 으로 Kafka 데이터를 연동하는 프로젝트를 진행했다.개발환경서버에 설치되어 있는 파이썬이 구버전이었는데 버전을 올려서 하기가 어려운 상황이라 그냥 진행했다. Python: 2.7 Kafka-python: 2.0.2 Elasticsearch: 6.8.2프로세스프로세스는 심플하다.데이터를 가져와서 가공한 후에 각각의 서버로 넣어주는 파이프 역할이었다. Kafka Data Poll -&amp;gt; 전처리 -&amp;gt; Kafka Producer 전송 Kafka Data Poll -&amp;gt; 전처리 -&a..." }, { "title": "Python 토픽 모델링", "url": "/posts/Python-%ED%86%A0%ED%94%BD%EB%AA%A8%EB%8D%B8%EB%A7%81/", "categories": "Python, BigData", "tags": "Python, Gensim, LDA, Topic, Bigdata, 빅데이터, 토픽", "date": "2021-12-13 17:42:00 +0900", "snippet": "파이썬의 Gensim 라이브러리를 이용해서 토픽을 추출하는 프로젝트를 진행했다.처음으로 파이썬으로 개발을 진행한 프로젝트라 기록을 남겨둔다.데이터1. 상품 및 유형 데이터 (2x3)2. 하루 치 상담 데이터 (상품 및 유형 정보 포함)3. 중복제거 된 상담사 데이터4. 한국 지역 및 장소,지명 데이터위의 데이터로 각 상품 &amp;amp; 유형 별 상위 10개의 토픽을 뽑아야 했다.라이브러리 - gensim : 자연어 처리 모듈 - mecab : 형태소 분석기 - pyhive : python &amp;lt;-&amp;gt; h..." }, { "title": "Python PyHive", "url": "/posts/Python-PyHive/", "categories": "Python, Library", "tags": "Python, 파이썬, PyHive, hive, 하이브", "date": "2021-12-01 17:42:00 +0900", "snippet": "PyHive파이썬에서 hive로 접속해서 쿼리를 할 수 있게 도와주는 라이브러리다.pyhive 라이브러리는 Kerberos 프로토콜을 이용해서 python &amp;lt;-&amp;gt; hive 통신을 하기 때문에,이와 관련된 라이브러리를 설치해줘야 한다.설치pip install sasl (인증 및 데이터보안)pip install thrift (이기종 통신)pip install thrift-saslpip install pyhive사용from pyhive import hiveconn = hive.Connection(host=&..." }, { "title": "RestAPI에 Swagger 적용하기", "url": "/posts/Rest-API%EC%97%90-Swagger-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/", "categories": "Java, Spring", "tags": "Java, Spring, Swagger, rest, API", "date": "2019-01-18 20:52:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»이전에 만든 Rest 연습 프로젝트에 Swagger2를 적용해보았다.Swagger 는 프로젝트에 정의되어 있는 URL 매핑 정보를 브라우저로 한눈에 볼 수 있게 해주는 자동화 라이브러리이다.또한, Postman 처럼 URL 호출 테스트도 지원한다.그럼 이제 Swagger 적용을 해보자.라이브러리 추가우선 Swagger Dependency를 추가한다.&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/grou..." }, { "title": "Spring Boot + H2 Rest API", "url": "/posts/SpringBoot+H2-RestAPI-%EC%97%B0%EC%8A%B5/", "categories": "Java, Spring", "tags": "Java, Spring, SpringBoot, h2, rest, API", "date": "2019-01-15 20:52:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»새로 시작한 프로젝트에서 Spring Boot 와 Spring Data Rest 를 이용해서기존 시스템들의 API 서비스를 구축하고자 한다고 하여,미리 예습도 해보고 경험도 할 겸 프로젝트를 만들어보았다.기존에 만들어둔 프로젝트 기반으로 Rest API만 적용 해볼까 생각도 해봤지만,동일한 환경에서 해야 나중에 헤매지 않을 것 같아서 새로 생성을 했다.개발환경은 아래와 같다. o Language : Java9 (Spring Boot 기본값은 8인듯 하다.)  o Tools : Intel..." }, { "title": "Apache Tiles 적용", "url": "/posts/Apache-Tiles-%EC%A0%81%EC%9A%A9/", "categories": "Java, Spring", "tags": "Java, Spring, Tiles", "date": "2018-09-04 20:52:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»지난 프로젝트에서 적용했던 Apache Tiles 에 대해 정리해본다.진행했던 프로젝트의 화면 구성이 헤더, 좌측 메뉴, footer, 그리고 본문.이런식으로 구성이 되어 있다보니 반복되는 부분들이 많아서 Apache Tiles를 적용해서 Layout 관리를 했다.대충 그림으로 보자면 아래와 같다.HeaderMenuContents&amp;nbsp;Footer&amp;nbsp;라이브러리 추가우선 Tiles를 사용하기 위해 Dependency를 추가해준다.pom.xml&amp;lt;depen..." }, { "title": "Java9 + Spring5 + Gradle + MyBatis 개발환경 만들기", "url": "/posts/Java9+Spring+Gradle+Mybatis-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0/", "categories": "Java, Spring", "tags": "Java, Spring, Gradle, MyBatis, 환경설정", "date": "2017-12-08 20:52:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»이번에는 저번 포스팅의 번외편으로,Hibernate가 아닌 MyBatis로 개발환경을 구축 해보자.Hibernate 관련 포스팅은 아래로.. ::: Hibernate 관련 포스팅 ::: [JAVA] Java9 + Spring5 + Gradle + Hibernate 개발환경 만들기 이 포스팅은 기존 포스팅에 이어지는 포스팅으로 아래 포스팅에 이어지는 내용이다. ::: 기존 포스팅 ::: [JAVA] Java9 + Spring5 + Gradle 개발환경 만들기 MyBatis 관련 ..." }, { "title": "Java9 + Spring5 + Gradle + Hibernate 개발환경 만들기", "url": "/posts/Java9+Spring+Gradle+Hibernate-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0/", "categories": "Java, Spring", "tags": "Java, Spring, Gradle, Hibernate, 환경설정", "date": "2017-12-08 20:52:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»이 포스팅은 지난 포스팅과 연결된 포스팅 입니다.지난 포스팅1. [JAVA] Java9 + Spring5 + Gradle 개발환경 만들기2. [JAVA] Java9 + Spring5 + Gradle 개발환경 만들기 (2)Hibernate 포스팅을 시작하기에 앞서 Hibernate에 대해…. JPA : woniper님의 블로그 :: JPA란 무엇인가? woniper님 슬라이드 :: JPA 잘 (하는 척) 하기 Hibernate : Y2K님의 블로그 :: Hibernate J..." }, { "title": "Java9 + Spring5 + Gradle 개발환경 만들기 (2)", "url": "/posts/Java9+Spring+Gradle-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0(2)/", "categories": "Java, Spring", "tags": "Java, Spring, Gradle, 환경설정", "date": "2017-11-30 20:52:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»이전 포스팅에서 만든 프로젝트를 Spring 프로젝트로 바꾸는 작업을 해보자.[JAVA] Java9 + Spring5 + Gradle 개발환경 만들기일단 내가 알던 Spring 환경설정법 하고는 확연히 바뀐 점이 있다.내가 알던 스프링은 별도의 xml을 이용해서 설정들을 관리 했었는데,이게 Servlet 3.0 버전부터 JAVA로 만들 수 있게 되었다고 한다.(자세한 설명 »&amp;gt; [스프링 3.1] web.xml이 없는 자바 웹 애플리케이션또 버전별로 달라진 부분들도 제법 많았다..." }, { "title": "Java9 + Spring5 + Gradle 개발환경 만들기", "url": "/posts/Java9+Spring+Gradle-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0/", "categories": "Java, Spring", "tags": "Java, Spring, Gradle, 환경설정", "date": "2017-11-24 20:52:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»이직도 준비할 겸 생각만 하고 있던 개인프로젝트를 진행했다.이번 포스팅은 개인 프로젝트 개발환경 만들기다.JDK7 까지만 써보았던 나로써는 8도 생소한데 바로 9를 해도 될까?이 고민만 3일동안 한 것 같다.어차피 Java8에 추가된 람다식, 스트림도 잘 모르는 나로써는 8이나 9나 둘 다 생소한 것은 똑같은 입장..그래서 단지 Java9 이 최신버전이니까 쓰게 되었다.Spring 또한 3.xx 버전만 써왔던 나로써는 이것도 2단계를 건너뛰게 되었다.스프링 부트는 말로 많이 듣긴 했지만 ..." }, { "title": "Properties 파일로 메시징 처리하기", "url": "/posts/Properties-%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EB%A9%94%EC%8B%9C%EC%A7%95-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0/", "categories": "Java, Spring", "tags": "Java, Spring, Message", "date": "2016-02-02 16:03:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»프로젝트 진행중에 엑셀 다운로드를 하는 부분이 있었는데 컬럼명이 한글이다 보니 다국어 처리를 하게 되었다.JAVA단에 한글 넣는것은 극도로 꺼리기 때문에 (주석도 최대한 영어로 적는다.)한글 처리를 위해 메시징 처리를 하였다.따로 세팅을 잡아주는 사람도 없기 때문에 모든걸 직접 해야 하는 상황이다.(2년반된 개발자로써 좋은 기회라 생각한다. 이거저거 해보는게 좋다고 생각하기 때문에..)이번에도 역시 구글신님의 도움을 받아서 ReloadableResourceBundleMessageSourc..." }, { "title": "정규식을 이용한 전화번호 추출", "url": "/posts/%EC%A0%95%EA%B7%9C%EC%8B%9D%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%A0%84%ED%99%94%EB%B2%88%ED%98%B8-%EC%B6%94%EC%B6%9C/", "categories": "Java, Parsing", "tags": "Java, Parsing, Regex", "date": "2015-12-23 16:03:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»개인정보 입력에서 거의 빠지지 않는 항목인 전화번호를 추출하는 방법을 알아보자.요즘은 보통 집전화번호 같은 경우는 필수로 받질 않기 때문에 사람들이 임의로 아무거나 입력하는 경우가 많다.그러나 우리는 입력된 그 번호를 가지고 데이터를 핸들링 해야한다.이번엔 하이픈(-) 을 넣어서 구분자 입력 처리를 해볼것이다.소스부터 보시라..JAVA Methodpublic void telTest() { String sample = &quot;&quot;; System.out.pri..." }, { "title": "Spring Transaction 처리", "url": "/posts/Spring-Transaction-%EC%B2%98%EB%A6%AC/", "categories": "Java, Spring", "tags": "Java, Spring, Transaction", "date": "2015-12-02 16:03:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»SPRING + MAVEN + MyBatis로 되어 있는 프레임워크로 프로젝트를 진행하던 중 트랜잭션 관련된 이슈가 생겨서 글로 남겨둔다.스프링자체에 @Transactional 이라는 어노테이션이 있길래 당연히 이걸 쓰면 되는줄 알고 썼다가.. 큰일날뻔 했다..요놈이 글쎄 트랜잭션 처리를 안해줌..!!!로직 자체가 한 메소드에서 여러 테이블에 저장을 해야 하는 로직인데,autoCommit이 되버려서 데이터가 꼬여버리는 것이었다..결국 구글신님께 도움을 요청. 몇가지 원인이 될만한 것들을 ..." }, { "title": "REST API 호출", "url": "/posts/REST-API-%ED%98%B8%EC%B6%9C/", "categories": "Java, API", "tags": "Java, RestAPI, API", "date": "2015-12-02 16:03:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»협업 프로젝트를 진행하다 보면 REST API를 사용해야 하는 경우가 있다.이번에 REST API를 호출하는 기능을 만드는 기회가 있어서 정리를 위해 글을 남긴다.내가 사용한 방식은 HttpURLConnection을 이용한 방식이다.리턴 방식은 JSON 형태로 아래와 같다고 하자.JSON Data{ success : true/false, data : { data1 : &quot;data1&quot;, data2 : &quot;data2&quot;..." }, { "title": "FOR LOOP", "url": "/posts/FOR-LOOP/", "categories": "DB, Sql", "tags": "DB, Sql, for loop", "date": "2015-11-17 20:52:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»정말 오랜만의 포스팅이다..이번엔 알아두면 좋고 생각보다 많이 쓰이는 쿼리문이다. 보통 한번에 데이터를 넣거나 변경이 필요한 경우 사용한다.실제 업무를 하다보면 데이터 마이그레이션이나 특정 데이터의 값을 일괄적으로 바꿔야 하는 경우가 생기는데, 이때 종종 사용한다.쿼리  DECLARE v_num NUMBER; -- 변수 선언 BEGIN v_num := 0; FOR c1 IN (SELECT 컬럼명1 ,컬럼명..." }, { "title": "printStackTrace String값으로 읽기", "url": "/posts/printStackTrace-String%EA%B0%92%EC%9C%BC%EB%A1%9C-%EC%9D%BD%EA%B8%B0/", "categories": "Java, Log", "tags": "Java, Log, Exception", "date": "2015-11-17 20:52:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»로그 파일을 분리해서 로그를 남기기는 했는데..Exception에서 제공해주는 getMessage()를 사용해서 로그를 남겼더니 정보가 너무 부족했다..printStackTrace를 그대로 뿌려주면 안되나 했는데 될리가 있나..방법이 없어 구글링 시작..그래서 찾은 해법..일단 지난번 했던 로그파일분리 에서 사용했던 메소드를 재활용해보자..// Properties load public void setProperties() { PropertyConfigurator.configure(t..." }, { "title": "Logger 2개 사용하기", "url": "/posts/Logger-2%EA%B0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/", "categories": "Java, Log", "tags": "Java, Log, log4j", "date": "2015-11-17 20:52:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»이것은 기본 JAVA Project 기준으로 설명합니다.지난번에 log4j파일분리 세팅 을 했으니 이번엔 그 사용법을 알아보자.요구사항은 일반 디버깅 로그와 작업수행에 대해 직관적으로 볼 수 있는 로그파일 2개를 생성해 달라는 것이었다.기본 자바 프로젝트다보니 log4j 설정파일 경로 같은 것을 XML등을 이용해서 셋팅하는게 불가능하고 기본 JAVA 클래스에서 처리를 해야 했다.그리고 이 프로젝트 자체가 jar파일로 만들어 배치작업을 돌려야 하기 때문에 해당 프로젝트내에서 properti..." }, { "title": "Log4j 로그파일 분리", "url": "/posts/Log4j-%EB%A1%9C%EA%B7%B8%ED%8C%8C%EC%9D%BC-%EB%B6%84%EB%A6%AC/", "categories": "Java, Log", "tags": "Java, Log, log4j", "date": "2015-11-13 11:52:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»이번에 작업을 하면서 고객사측에서 로그를 직관적으로 볼 수 있게 해달라는 요청이 왔다.워낙 document에 약해서 그쪽을 제대로 신경을 쓰질 못했는데 역시나…그래서 이번에 부랴부랴 찾아본 로그관리 툴 Log4j.사용하기도 편리하고 등급별로 로그를 남길 수가 있어서 많은 개발자들이 애용하고 있단다..사실 log4j는 실무에서 자바 개발을 한다면 누구나 볼 수 있었을것이다.다만 제대로 파악을 못하고 있었을 뿐…사실 이번에 요놈을 사용해보니 특별히 어려운게 전혀 없었다..설정파일만 잘 세팅하..." }, { "title": "XML 파싱", "url": "/posts/XML-%ED%8C%8C%EC%8B%B1/", "categories": "Java, Parsing", "tags": "Java, Xml", "date": "2015-10-29 18:02:00 +0900", "snippet": "«Tistory 블로그에서 작성했던 글»새로운 회사에 와서 처음으로 받은 작업..XML파일을 파싱해서 DB에 저장해달라는 것이었다.하라면 해야지..일단 XML의 예제 구조부터 보자.Data XML&amp;lt;developmentteam&amp;gt; &amp;lt;solutionteam&amp;gt; &amp;lt;name&amp;gt;홍길동&amp;lt;/name&amp;gt; &amp;lt;tel&amp;gt;010-0000-0000&amp;lt;/tel&amp;gt; &..." } ]
